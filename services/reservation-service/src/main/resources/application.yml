server:
  port: 8083

reservation-service:
  user-service:
    host: localhost
    port: 8084
    url: "http://${reservation-service.user-service.host}:${reservation-service.user-service.port}"
  property-service:
    host: localhost
    port: 8081
    url: "http://${reservation-service.property-service.host}:${reservation-service.property-service.port}"
  auth-server:
    host: localhost
    port: 8090
    client-secret: 947169c8-515f-4403-8eed-4708f36c90f0
  database:
    mongo:
      host: localhost
      port: 27017
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest

spring:
  application:
    name: reservation-service
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${EMAIL}
    password: ${EMAIL_PASSWORD}
    properties:
      mail.smtp:
        auth: true
        starttls.enable: true
  data:
    mongodb:
      host: ${reservation-service.database.mongo.host}
      port: ${reservation-service.database.mongo.port}
      database: reservations
  rabbitmq:
    host: ${reservation-service.rabbitmq.host}
    port: ${reservation-service.rabbitmq.port}
    username: ${reservation-service.rabbitmq.username}
    password: ${reservation-service.rabbitmq.password}
  cloud:
    config:
      enabled: false
    stream:
      defaultBinder: rabbit
      default.contentType: application/json
      bindings:
        input:
          destination: reservations
          group: reservationsGroup
          consumer:
            maxAttempts: 3
            backOffInitialInterval: 500
            backOffMaxInterval: 1000
            backOffMultiplier: 2.0
        output-users:
          destination: users
          producer.required-groups: auditGroup
        output-properties:
          destination: properties
          producer.required-groups: auditGroup
      rabbit.bindings.input.consumer:
        autoBindDlq: true
        republishToDlq: true
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: http://${reservation-service.auth-server.host}:${reservation-service.auth-server.port}/auth/realms/booking/protocol/openid-connect/certs
          issuer-uri: http://${reservation-service.auth-server.host}:${reservation-service.auth-server.port}/auth/realms/booking
      client:
        registration:
          keycloak:
            client-id: 'reservation-service-client'
            client-secret: ${reservation-service.auth-server.client-secret}
            authorizationGrantType: client_credentials
            client-name: keycloak
            redirectUri: '{baseUrl}/login/oauth2/code/{registrationId}'
            scope:
              - openid
              - profile
              - email
        provider:
          keycloak:
            issuerUri: http://${reservation-service.auth-server.host}:${reservation-service.auth-server.port}/auth/realms/booking
            token-uri: http://${reservation-service.auth-server.host}:${reservation-service.auth-server.port}/auth/realms/booking/protocol/openid-connect/token

---
spring:
  config:
    activate:
      on-profile: kubernetes

reservation-service:
  user-service:
    host: user-service
  property-service:
    host: property-service
  auth-server:
    host: keycloak
    port: 8080
    client-secret: MkmPjhwVQFhGfD6ClRFjug3ycS0WBplA
  database:
    mongo:
      host: mongo
  rabbitmq:
    host: rabbitmq
    username: default_user_XhVRPRZIV6v4Kkn3VOU
    password: kePZ_VoNHTqJU4pxuIY8RlaWPhA9Bwv6